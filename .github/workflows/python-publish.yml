# Publishes the Python package (Crypto-Trader-Analysis) to PyPI when a GitHub Release is created
# Requires repository secret: PYPI_API_TOKEN (an API token from PyPI)
# You can also run this manually via the "Run workflow" button (workflow_dispatch).

name: Publish Python Package (Crypto-Trader-Analysis)

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build package
        working-directory: Crypto-Trader-Analysis
        run: |
          python -m build

      - name: Extract project version
        id: get_version
        shell: bash
        run: |
          V=$(python -c "import tomllib; d=tomllib.load(open('Crypto-Trader-Analysis/pyproject.toml','rb')); print(d['project']['version'])")
          echo "version=$V" >> "$GITHUB_OUTPUT"

      - name: Check if version already exists on PyPI
        id: check_pypi
        shell: bash
        run: |
          NAME="crypto-trader-analysis"
          V="${{ steps.get_version.outputs.version }}"
          URL="https://pypi.org/pypi/${NAME}/${V}/json"
          echo "Checking existence on PyPI: $URL"
          code=$(curl -L -s -o /dev/null -w "%{http_code}" "$URL")
          exists=false
          if [ "$code" = "200" ]; then exists=true; fi
          echo "exists=$exists" >> "$GITHUB_OUTPUT"
          if [ "$exists" = true ]; then echo "Version $V already exists on PyPI. Skipping upload."; fi

      - name: Check for PyPI API token
        id: has_token
        shell: bash
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          if [ -n "$PYPI_TOKEN" ]; then echo "present=true" >> "$GITHUB_OUTPUT"; else echo "present=false" >> "$GITHUB_OUTPUT"; fi

      - name: Publish package to PyPI (token)
        if: steps.check_pypi.outputs.exists == 'false' && steps.has_token.outputs.present == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: Crypto-Trader-Analysis/dist

      - name: Publish package to PyPI (OIDC)
        if: steps.check_pypi.outputs.exists == 'false' && steps.has_token.outputs.present != 'true' && startsWith(github.ref, 'refs/tags/')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: Crypto-Trader-Analysis/dist

      - name: Skip publish (already exists)
        if: steps.check_pypi.outputs.exists == 'true'
        run: echo "Skipped publish. Version ${{ steps.get_version.outputs.version }} already exists on PyPI."

      - name: Skip publish (no token and not a tag)
        if: steps.check_pypi.outputs.exists == 'false' && steps.has_token.outputs.present != 'true' && !startsWith(github.ref, 'refs/tags/')
        run: |
          echo "Skipping publish: No PYPI_API_TOKEN configured and this run is not on a tag (github.ref=${GITHUB_REF})."
          echo "To use Trusted Publishing (OIDC), configure a Trusted Publisher for this project on PyPI and trigger this workflow from a tag or release."

      - name: Check for GitHub Packages token
        id: has_gh_packages_token
        shell: bash
        env:
          GH_PACKAGES_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          if [ -n "$GH_PACKAGES_TOKEN" ]; then echo "present=true" >> "$GITHUB_OUTPUT"; else echo "present=false" >> "$GITHUB_OUTPUT"; fi

      - name: Publish to GitHub Packages (Python registry via GH_PACKAGES_TOKEN)
        id: publish_ghp_pat
        continue-on-error: true
        if: steps.has_gh_packages_token.outputs.present == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PACKAGES_TOKEN }}
          repository-url: https://pypi.pkg.github.com/${{ github.repository_owner }}/
          packages-dir: Crypto-Trader-Analysis/dist
          skip-existing: true
          attestations: false

      - name: Publish to GitHub Packages (Python registry via GITHUB_TOKEN)
        if: always() && (steps.has_gh_packages_token.outputs.present != 'true' || steps.publish_ghp_pat.conclusion == 'failure')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          repository-url: https://pypi.pkg.github.com/${{ github.repository_owner }}/
          packages-dir: Crypto-Trader-Analysis/dist
          skip-existing: true
          attestations: false

      - name: Debug upload to GitHub Packages with twine (verbose)
        if: always() && env.DEBUG_GH_PACKAGES == '1'
        env:
          TWINE_USERNAME: ${{ github.repository_owner }}
          TWINE_PASSWORD: ${{ secrets.GH_PACKAGES_TOKEN }}
        run: |
          python -m pip install --upgrade twine
          python -m twine upload --verbose \
            --repository-url https://pypi.pkg.github.com/${{ github.repository_owner }}/ \
            Crypto-Trader-Analysis/dist/*
