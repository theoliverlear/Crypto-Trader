name: Build & Publish Crypto-Trader-Docs

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read
  # pages/id-token moved to deploy job

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_ACTOR: ${{ github.actor }}
    outputs:
      pages_enabled: ${{ steps.pages.outcome }}
      site_ready: ${{ steps.verify_site.outputs.site_ready }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java (23)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '23'
          cache: 'maven'

      - name: Build all modules (install to local repo)
        run: mvn -B -s .github/maven-settings.xml -DskipTests -U clean install

      - name: Generate Dokka for all modules
        run: mvn -B -s .github/maven-settings.xml -DskipTests org.jetbrains.dokka:dokka-maven-plugin:1.9.20:dokka

      - name: Start API (docs profile) in background
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          PSQL_DB_URL: ${{ secrets.PSQL_DB_URL }}
          PSQL_HOST: ${{ secrets.PSQL_HOST }}
          PSQL_PW: ${{ secrets.PSQL_PW }}
          PSQL_USER: ${{ secrets.PSQL_USER }}
          PYTHONUNBUFFERED: ${{ secrets.PYTHONUNBUFFERED }}
          WORLDNEWS_API_KEY: ${{ secrets.WORLDNEWS_API_KEY }}
          X_ACCESS_SECRET: ${{ secrets.X_ACCESS_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_SECRET: ${{ secrets.X_SECRET }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          APP_NAME: ${{ secrets.APP_NAME }}
        working-directory: .
        run: |
          nohup mvn -B -s .github/maven-settings.xml -DskipTests \
            -f Crypto-Trader-Api/pom.xml -am \
            -Dspring-boot.run.profiles=docs \
            -Dspring-boot.run.arguments=--server.port=18080 \
            spring-boot:run > api.log 2>&1 &
          echo $! > api.pid

      - name: Wait for API to be ready
        run: |
          for i in {1..90}; do
            if curl -fsS http://localhost:18080/v3/api-docs.yaml >/dev/null; then
              echo "API docs are up"; exit 0; fi
            if [ -f api.pid ] && ! ps -p "$(cat api.pid)" >/dev/null 2>&1; then
              echo "API process exited early"; break; fi
            sleep 2
          done
          echo "API failed to start; printing api.log:"
          tail -n +1 api.log || true
          exit 1

      - name: Start Data (docs profile) in background
        run: |
          nohup mvn -B -s .github/maven-settings.xml -DskipTests \
            -f Crypto-Trader-Data/pom.xml -am \
            -Dspring-boot.run.profiles=docs \
            -Dspring-boot.run.arguments="--server.port=18081 --cryptotrader.loadCurrencies=false" \
            spring-boot:run > data.log 2>&1 &
          echo $! > data.pid

      - name: Start Engine (docs profile) in background
        run: |
          nohup mvn -B -s .github/maven-settings.xml -DskipTests \
            -f Crypto-Trader-Engine/pom.xml -am \
            -Dspring-boot.run.profiles=docs \
            -Dspring-boot.run.arguments="--server.port=18082 --cryptotrader.engine.trading.enabled=false" \
            spring-boot:run > engine.log 2>&1 &
          echo $! > engine.pid

      - name: Start Contact (docs profile) in background
        run: |
          nohup mvn -B -s .github/maven-settings.xml -DskipTests \
            -f Crypto-Trader-Contact/pom.xml -am \
            -Dspring-boot.run.profiles=docs \
            -Dspring-boot.run.arguments="--server.port=18083 --cryptotrader.engine.trading.enabled=false" \
            spring-boot:run > contact.log 2>&1 &
          echo $! > contact.pid

      - name: Wait for APIs to be ready
        run: |
          for i in {1..120}; do
            A=$(curl -fsS http://localhost:18080/v3/api-docs.yaml >/dev/null && echo ok || echo no)
            D=$(curl -fsS http://localhost:18081/v3/api-docs.yaml >/dev/null && echo ok || echo no)
            E=$(curl -fsS http://localhost:18082/v3/api-docs.yaml >/dev/null && echo ok || echo no)
            C=$(curl -fsS http://localhost:18083/v3/api-docs.yaml >/dev/null && echo ok || echo no)
            if [ "$A" = ok ] && [ "$D" = ok ] && [ "$E" = ok ] && [ "$C" = ok ]; then
              echo "All APIs are up"; exit 0; fi
            sleep 2
          done
          echo "APIs failed to start; dumping logs"
          tail -n +1 api.log || true
          tail -n +1 data.log || true
          tail -n +1 engine.log || true
          tail -n +1 contact.log || true
          exit 1

      - name: Build docs module (generate OpenAPI + copy to docs)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: mvn -B -s .github/maven-settings.xml -DskipTests -Ddocs.skipOpenapi=false -f Crypto-Trader-Docs/pom.xml -N verify

      - name: "Fallback: fetch OpenAPI specs into docs if empty"
        run: |
          set -e
          mkdir -p Crypto-Trader-Docs/docs/api
          check_and_fetch() {
            URL="$1"
            OUT="$2"
            # If file is missing or empty, fetch it
            if [ ! -s "$OUT" ]; then
              echo "[Fallback] Fetching $URL -> $OUT"
              curl -fsS "$URL" -o "$OUT" || true
            fi
            # Verify non-empty after fetch
            if [ ! -s "$OUT" ]; then
              echo "::error::OpenAPI spec still missing or empty: $OUT (source: $URL)" >&2
              exit 1
            else
              echo "[Fallback] Verified non-empty: $OUT ($(wc -c < "$OUT") bytes)"
            fi
          }
          # For CT API, try multiple hosts/ports and both yaml and json endpoints to be robust
          check_and_fetch_from_many() {
            OUT="$1"; shift
            if [ -s "$OUT" ]; then
              echo "[Fallback] Already present: $OUT ($(wc -c < "$OUT") bytes)"; return 0
            fi
            for URL in "$@"; do
              echo "[Fallback] Trying: $URL"
              curl -fsS "$URL" -o "$OUT" && break || true
            done
            if [ ! -s "$OUT" ]; then
              echo "::error::OpenAPI spec still missing or empty: $OUT (tried: $*)" >&2
              echo "---- api.log (last 200 lines) ----" >&2
              tail -n 200 api.log >&2 || true
              exit 1
            else
              echo "[Fallback] Verified non-empty: $OUT ($(wc -c < "$OUT") bytes)"
            fi
          }
          check_and_fetch_from_many Crypto-Trader-Docs/docs/api/openapi-api.yaml \
            http://localhost:18080/v3/api-docs.yaml \
            http://127.0.0.1:18080/v3/api-docs.yaml \
            http://[::1]:18080/v3/api-docs.yaml \
            http://localhost:8080/v3/api-docs.yaml \
            http://127.0.0.1:8080/v3/api-docs.yaml \
            http://[::1]:8080/v3/api-docs.yaml \
            http://localhost:18080/v3/api-docs \
            http://127.0.0.1:18080/v3/api-docs \
            http://[::1]:18080/v3/api-docs
          check_and_fetch http://localhost:18081/v3/api-docs.yaml Crypto-Trader-Docs/docs/api/openapi-data.yaml
          check_and_fetch http://localhost:18082/v3/api-docs.yaml Crypto-Trader-Docs/docs/api/openapi-engine.yaml
          check_and_fetch http://localhost:18083/v3/api-docs.yaml Crypto-Trader-Docs/docs/api/openapi-contact.yaml

      - name: Stop APIs
        run: |
          if [ -f api.pid ]; then kill "$(cat api.pid)" || true; fi
          if [ -f data.pid ]; then kill "$(cat data.pid)" || true; fi
          if [ -f engine.pid ]; then kill "$(cat engine.pid)" || true; fi
          if [ -f contact.pid ]; then kill "$(cat contact.pid)" || true; fi

      - name: Run tests with coverage (aggregate)
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          PSQL_DB_URL: ${{ secrets.PSQL_DB_URL }}
          PSQL_HOST: ${{ secrets.PSQL_HOST }}
          PSQL_PW: ${{ secrets.PSQL_PW }}
          PSQL_USER: ${{ secrets.PSQL_USER }}
          PYTHONUNBUFFERED: ${{ secrets.PYTHONUNBUFFERED }}
          WORLDNEWS_API_KEY: ${{ secrets.WORLDNEWS_API_KEY }}
          X_ACCESS_SECRET: ${{ secrets.X_ACCESS_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_SECRET: ${{ secrets.X_SECRET }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          APP_NAME: ${{ secrets.APP_NAME }}
        run: mvn -B -s .github/maven-settings.xml -ntp -Pcoverage -DskipITs=true -DfailIfNoTests=false clean verify

      - name: Set up .NET (for ReportGenerator)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Add .NET global tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Build single aggregate coverage site
        run: |
          reportgenerator \
            -reports:"Crypto-Trader-Coverage/target/site/jacoco-aggregate/jacoco.xml" \
            -targetdir:"Crypto-Trader-Docs/docs/coverage" \
            -reporttypes:"Html;HtmlChart;Badges" \
            -sourcedirs:. \
            -classdirectories:"**/target/classes" \
            -assemblymode:MergeByClass
          if [ -f Crypto-Trader-Docs/docs/coverage/index.htm ] && [ ! -f Crypto-Trader-Docs/docs/coverage/index.html ]; then
            cp Crypto-Trader-Docs/docs/coverage/index.htm Crypto-Trader-Docs/docs/coverage/index.html
          fi

      - name: Build (runs verify -> javadoc -> copy)
        run: mvn -B -s .github/maven-settings.xml -DskipTests verify

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install MkDocs Material
        working-directory: Crypto-Trader-Docs
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material

      - name: Build MkDocs site
        working-directory: Crypto-Trader-Docs
        run: mkdocs build --site-dir site

      - name: Configure Pages
        id: pages
        uses: actions/configure-pages@v5
        continue-on-error: true
        with:
          enablement: true

      # ✅ Only mark site ready when it actually exists and is non-empty
      - name: Verify built site is non-empty
        id: verify_site
        run: |
          SITE_DIR="Crypto-Trader-Docs/site"
          if [ -s "$SITE_DIR/index.html" ] && [ "$(find "$SITE_DIR" -type f | wc -l)" -gt 5 ]; then
            echo "site_ready=true" >> "$GITHUB_OUTPUT"
            echo "Site verified."
          else
            echo "site_ready=false" >> "$GITHUB_OUTPUT"
            echo "::warning::Site is missing or empty. Skipping upload and deploy."
          fi

      - name: Upload Pages artifact
        if: ${{ steps.verify_site.outputs.site_ready == 'true' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: Crypto-Trader-Docs/site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success' && needs.build.outputs.pages_enabled == 'success' && needs.build.outputs.site_ready == 'true'
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
