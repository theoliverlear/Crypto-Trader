name: Build & Publish Crypto-Trader-Docs

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      pages_enabled: ${{ steps.pages.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java (23)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '23'
          cache: 'maven'

      - name: Build all modules (install to local repo)
        run: mvn -B -s .github/maven-settings.xml -DskipTests -U clean install

      - name: Generate Dokka for all modules
        run: mvn -B -s .github/maven-settings.xml -DskipTests org.jetbrains.dokka:dokka-maven-plugin:1.9.20:dokka
      

      - name: Start API (docs profile) in background
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
          PSQL_DB_URL: ${{ secrets.PSQL_DB_URL }}
          PSQL_HOST: ${{ secrets.PSQL_HOST }}
          PSQL_PW: ${{ secrets.PSQL_PW }}
          PSQL_USER: ${{ secrets.PSQL_USER }}
          PYTHONUNBUFFERED: ${{ secrets.PYTHONUNBUFFERED }}
          WORLDNEWS_API_KEY: ${{ secrets.WORLDNEWS_API_KEY }}
          X_ACCESS_SECRET: ${{ secrets.X_ACCESS_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_SECRET: ${{ secrets.X_SECRET }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          APP_NAME: ${{ secrets.APP_NAME }}
        working-directory: .
        run: |
          nohup mvn -B -s .github/maven-settings.xml -DskipTests \
            -f Crypto-Trader-Api/pom.xml -am \
            -Dspring-boot.run.profiles=docs \
            -Dspring-boot.run.arguments=--server.port=18080 \
            spring-boot:run > api.log 2>&1 &
          echo $! > api.pid

      - name: Wait for API to be ready
        run: |
          for i in {1..90}; do
            if curl -fsS http://localhost:18080/v3/api-docs.yaml >/dev/null; then
              echo "API docs are up"; exit 0; fi
            if [ -f api.pid ] && ! ps -p "$(cat api.pid)" >/dev/null 2>&1; then
              echo "API process exited early"; break; fi
            sleep 2
          done
          echo "API failed to start; printing api.log:"
          tail -n +1 api.log || true
          exit 1
          
      - name: Start Data (docs profile) in background
        run: |
          nohup mvn -B -s .github/maven-settings.xml -DskipTests \
            -f Crypto-Trader-Data/pom.xml -am \
            -Dspring-boot.run.profiles=docs \
            -Dspring-boot.run.arguments="--server.port=18081 --cryptotrader.loadCurrencies=false" \
            spring-boot:run > data.log 2>&1 &
          echo $! > data.pid

      - name: Start Engine (docs profile) in background
        run: |
          nohup mvn -B -s .github/maven-settings.xml -DskipTests \
            -f Crypto-Trader-Engine/pom.xml -am \
            -Dspring-boot.run.profiles=docs \
            -Dspring-boot.run.arguments="--server.port=18082 --cryptotrader.engine.trading.enabled=false" \
            spring-boot:run > engine.log 2>&1 &
          echo $! > engine.pid

      - name: Wait for APIs to be ready
        run: |
          for i in {1..120}; do
            A=$(curl -fsS http://localhost:18080/v3/api-docs.yaml >/dev/null && echo ok || echo no)
            D=$(curl -fsS http://localhost:18081/v3/api-docs.yaml >/dev/null && echo ok || echo no)
            E=$(curl -fsS http://localhost:18082/v3/api-docs.yaml >/dev/null && echo ok || echo no)
            if [ "$A" = ok ] && [ "$D" = ok ] && [ "$E" = ok ]; then
              echo "All APIs are up"; exit 0; fi
            sleep 2
          done
          echo "APIs failed to start; dumping logs"
          tail -n +1 api.log || true
          tail -n +1 data.log || true
          tail -n +1 engine.log || true
          exit 1

      - name: Build docs module (generate OpenAPI + copy to docs)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: mvn -B -s .github/maven-settings.xml -DskipTests -Ddocs.skipOpenapi=false -f Crypto-Trader-Docs/pom.xml -N verify

      - name: Stop APIs
        run: |
          if [ -f api.pid ]; then kill "$(cat api.pid)" || true; fi
          if [ -f data.pid ]; then kill "$(cat data.pid)" || true; fi
          if [ -f engine.pid ]; then kill "$(cat engine.pid)" || true; fi

      - name: Run tests with coverage (aggregate)
        run: mvn -B -ntp -Pcoverage -DskipITs=true -DfailIfNoTests=false clean verify

      - name: Set up .NET (for ReportGenerator)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Add .NET global tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Generate pretty coverage dashboard
        run: |
          reportgenerator \
            -reports:"**/target/site/jacoco/jacoco.xml;target/site/jacoco-aggregate/jacoco.xml" \
            -targetdir:target/site/coverage-aggregate \
            -reporttypes:"Html;HtmlChart;Badges" \
            -sourcedirs:. \
            -classdirectories:"**/target/classes" \
            -assemblymode:MergeByClass
          
      - name: Generate per-module coverage (pretty)
        run: |
          MODULES=(
            "Crypto-Trader-Api"
            "Crypto-Trader-Admin"
            "Crypto-Trader-Assets"
            "Crypto-Trader-Data"
            "Crypto-Trader-Docs"
            "Crypto-Trader-Engine"
            "Crypto-Trader-Logging"
            "Crypto-Trader-Testing"
            "Crypto-Trader-Version"
            "Crypto-Trader-Library/Api-Library/Api-Services"
            "Crypto-Trader-Library/Api-Library/Api-Repositories"
            "Crypto-Trader-Library/Api-Library/Api-Components"
            "Crypto-Trader-Library/Api-Library/Api-Communication"
            "Crypto-Trader-Library/Api-Library/Api-Config"
            "Crypto-Trader-Library/Api-Library/Api-Models"
          )

          for M in "${MODULES[@]}"; do
            XML="$M/target/site/jacoco/jacoco.xml"
            if [ -f "$XML" ]; then
              if [ -x "$HOME/.dotnet/tools/reportgenerator" ]; then
                reportgenerator \
                  -reports:"$XML" \
                  -targetdir:"$M/target/site/coverage" \
                  -reporttypes:"Html;HtmlChart;Badges" \
                  -sourcedirs:"$M/src/main/java"
                SRC_DIR="$M/target/site/coverage"
              else
                SRC_DIR="$M/target/site/jacoco"
              fi

              MOD_NAME=$(basename "$M" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9-_')
              mkdir -p "Crypto-Trader-Docs/docs/coverage/$MOD_NAME"
              cp -r "$SRC_DIR/"* "Crypto-Trader-Docs/docs/coverage/$MOD_NAME/"
              if [ -f "Crypto-Trader-Docs/docs/coverage/$MOD_NAME/index.htm" ] && [ ! -f "Crypto-Trader-Docs/docs/coverage/$MOD_NAME/index.html" ]; then
                cp "Crypto-Trader-Docs/docs/coverage/$MOD_NAME/index.htm" "Crypto-Trader-Docs/docs/coverage/$MOD_NAME/index.html"
              fi
            fi
          done

      - name: Copy coverage into docs
        run: |
          mkdir -p Crypto-Trader-Docs/docs/coverage
          cp -r target/site/coverage-aggregate/* Crypto-Trader-Docs/docs/coverage/
          if [ -f Crypto-Trader-Docs/docs/coverage/index.htm ] && [ ! -f Crypto-Trader-Docs/docs/coverage/index.html ]; then
            cp Crypto-Trader-Docs/docs/coverage/index.htm Crypto-Trader-Docs/docs/coverage/index.html
          fi

      - name: Build (runs verify -> javadoc -> copy)
        run: mvn -B -DskipTests verify

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install MkDocs Material
        working-directory: Crypto-Trader-Docs
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material

      - name: Build MkDocs site
        working-directory: Crypto-Trader-Docs
        run: mkdocs build --site-dir site

      - name: Configure Pages
        id: pages
        uses: actions/configure-pages@v5
        continue-on-error: true
        with:
          enablement: true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: Crypto-Trader-Docs/site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.pages_enabled == 'success'
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
