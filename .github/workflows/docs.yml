name: Build & Publish Crypto-Trader-Docs

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read
  # pages/id-token moved to deploy job

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_ACTOR: ${{ github.actor }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
      PSQL_DB_URL: ${{ secrets.PSQL_DB_URL }}
      PSQL_HOST: ${{ secrets.PSQL_HOST }}
      PSQL_PW: ${{ secrets.PSQL_PW }}
      PSQL_USER: ${{ secrets.PSQL_USER }}
      PYTHONUNBUFFERED: ${{ secrets.PYTHONUNBUFFERED }}
      WORLDNEWS_API_KEY: ${{ secrets.WORLDNEWS_API_KEY }}
      X_ACCESS_SECRET: ${{ secrets.X_ACCESS_SECRET }}
      X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
      X_API_KEY: ${{ secrets.X_API_KEY }}
      X_SECRET: ${{ secrets.X_SECRET }}
      REPO_NAME: ${{ secrets.REPO_NAME }}
      APP_NAME: ${{ secrets.APP_NAME }}
    outputs:
      pages_enabled: ${{ steps.pages.outcome }}
      site_ready: ${{ steps.verify_site.outputs.site_ready }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java (23)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '23'
          cache: 'maven'

      # Single Dokka run for all modules (no need for a full reactor install first)
      - name: Generate Dokka for all modules
        run: mvn -B -s .github/maven-settings.xml -DskipTests org.jetbrains.dokka:dokka-maven-plugin:1.9.20:dokka

      # Start all services with docs profile, wait until /v3/api-docs.yaml is up, fail fast if any process exits
      - name: Start services (docs profile) and wait
        run: |
          set -euo pipefail

          SERVICES=$(cat <<'EOF'
          api      Crypto-Trader-Api      18080   ""
          data     Crypto-Trader-Data     18081   "--cryptotrader.loadCurrencies=false"
          engine   Crypto-Trader-Engine   18082   "--cryptotrader.engine.trading.enabled=false"
          contact  Crypto-Trader-Contact  18083   "--cryptotrader.engine.trading.enabled=false"
          EOF
          )

          start_one () {
            local name="$1" module="$2" port="$3" extra="$4"
            echo "==> starting $name on :$port ($module)"
            nohup mvn -B -s .github/maven-settings.xml -DskipTests \
              -f "$module/pom.xml" -am \
              -Dspring-boot.run.profiles=docs \
              -Dspring-boot.run.arguments="--server.port=$port $extra" \
              spring-boot:run > "$name.log" 2>&1 &
            echo $! > "$name.pid"
          }

          echo "$SERVICES" | awk 'NF && $1 !~ /^#/' | while read -r name module port extra; do
            start_one "$name" "$module" "$port" "$extra"
          done

          die() {
            echo "::error::$1"
            echo "---- tail logs ----"
            tail -n 200 *.log || true
            exit 1
          }

          # Wait up to ~4 minutes like before (120 * 2s)
          for i in $(seq 1 120); do
            # Fail fast if any service died
            for pidfile in *.pid; do
              [ -f "$pidfile" ] || continue
              pid=$(cat "$pidfile")
              if ! ps -p "$pid" >/dev/null 2>&1; then
                svc="${pidfile%.pid}"
                die "Service '$svc' exited before becoming ready."
              fi
            done

            A=$(curl -fsS http://localhost:18080/v3/api-docs.yaml >/dev/null && echo ok || echo no)
            D=$(curl -fsS http://localhost:18081/v3/api-docs.yaml >/dev/null && echo ok || echo no)
            E=$(curl -fsS http://localhost:18082/v3/api-docs.yaml >/dev/null && echo ok || echo no)
            C_(curl -fsS http://localhost:18083/v3/api-docs.yaml >/dev/null && echo ok || echo no) || true
            C=${C_:-no}

            echo "probe #$i  A=$A D=$D E=$E C=$C"
            if [ "$A$D$E$C" = "okokokok" ]; then
              echo "All APIs are up"
              break
            fi
            sleep 2
          done

          if [ "$A$D$E$C" != "okokokok" ]; then
            die "Timed out waiting for APIs to start."
          fi

      # Generate OpenAPI + move into docs via the Docs module (keeps your existing POM behavior)
      - name: Build docs module (generate OpenAPI + copy to docs)
        run: mvn -B -s .github/maven-settings.xml -DskipTests -Ddocs.skipOpenapi=false -f Crypto-Trader-Docs/pom.xml -N verify

      # Backstop: if API spec is empty/missing, fetch directly from the running service
      - name: Ensure CT API spec is present and non-empty; fallback to live endpoint
        run: |
          set -euo pipefail
          FILE="Crypto-Trader-Docs/docs/api/openapi-api.yaml"
          if [ ! -s "$FILE" ] || [ "$(wc -c < "$FILE")" -eq 0 ]; then
            echo "CT OpenAPI spec missing/empty, fetching directly from running service..."
            mkdir -p "$(dirname "$FILE")"
            curl -fsS http://localhost:18080/v3/api-docs.yaml -o "$FILE" || true
            if [ ! -s "$FILE" ] || [ "$(wc -c < "$FILE")" -eq 0 ]; then
              echo "::warning::Failed to fetch CT OpenAPI spec; leaving it absent so the site shows a friendly message instead of an error."
              rm -f "$FILE" || true
            else
              echo "Fetched CT OpenAPI spec successfully (non-empty)."
            fi
          else
            echo "CT OpenAPI spec already present and non-empty."
          fi

      - name: Stop services
        if: always()
        run: |
          for f in api.pid data.pid engine.pid contact.pid; do
            [ -f "$f" ] && kill "$(cat "$f")" || true
          done

      # Coverage build (aggregate)
      - name: Run tests with coverage (aggregate)
        run: mvn -B -s .github/maven-settings.xml -ntp -Pcoverage -DskipITs=true -DfailIfNoTests=false clean verify

      - name: Set up .NET (for ReportGenerator)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install ReportGenerator & add to PATH
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"

      - name: Build single aggregate coverage site
        run: |
          reportgenerator \
            -reports:"Crypto-Trader-Coverage/target/site/jacoco-aggregate/jacoco.xml" \
            -targetdir:"Crypto-Trader-Docs/docs/coverage" \
            -reporttypes:"Html;HtmlChart;Badges" \
            -sourcedirs:. \
            -classdirectories:"**/target/classes" \
            -assemblymode:MergeByClass
          if [ -f Crypto-Trader-Docs/docs/coverage/index.htm ] && [ ! -f Crypto-Trader-Docs/docs/coverage/index.html ]; then
            cp Crypto-Trader-Docs/docs/coverage/index.htm Crypto-Trader-Docs/docs/coverage/index.html
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install MkDocs Material
        working-directory: Crypto-Trader-Docs
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material

      - name: Build MkDocs site
        working-directory: Crypto-Trader-Docs
        run: mkdocs build --site-dir site

      - name: Ensure CT API spec present in built site (post-build)
        run: |
          SRC="Crypto-Trader-Docs/docs/api/openapi-api.yaml"
          DST_DIR="Crypto-Trader-Docs/site/api"
          if [ -s "$SRC" ]; then
            mkdir -p "$DST_DIR"
            cp -f "$SRC" "$DST_DIR/openapi-api.yaml"
            echo "CT API spec copied into site directory:" && ls -l "$DST_DIR" || true
          else
            echo "::warning::CT API spec not found in docs/api when copying to site; page will show friendly message."
          fi

      - name: Configure Pages
        id: pages
        uses: actions/configure-pages@v5
        continue-on-error: true
        with:
          enablement: true

      - name: Verify built site is non-empty
        id: verify_site
        run: |
          SITE_DIR="Crypto-Trader-Docs/site"
          if [ -s "$SITE_DIR/index.html" ] && [ "$(find "$SITE_DIR" -type f | wc -l)" -gt 5 ]; then
            echo "site_ready=true" >> "$GITHUB_OUTPUT"
            echo "Site verified."
          else
            echo "site_ready=false" >> "$GITHUB_OUTPUT"
            echo "::warning::Site is missing or empty. Skipping upload and deploy."
          fi

      - name: Upload Pages artifact
        if: ${{ steps.verify_site.outputs.site_ready == 'true' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: Crypto-Trader-Docs/site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.result == 'success' && needs.build.outputs.pages_enabled == 'success' && needs.build.outputs.site_ready == 'true'
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4