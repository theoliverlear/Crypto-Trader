<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.cryptotrader</groupId>
    <artifactId>crypto-trader</artifactId>
    <version>0.2.1</version>
    <packaging>pom</packaging>
    <name>Crypto-Trader</name>
    <description>Crypto Trader is a web application that automates cryptocurrency trading to democratize highâ€‘frequency trading. See README for details.</description>
    <url>https://github.com/theoliverlear/Crypto-Trader</url>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.2</version>
        <relativePath/>
    </parent>

    <licenses>
        <license>
            <name>Sigwarth Software License</name>
            <url>https://raw.githubusercontent.com/theoliverlear/Crypto-Trader/HEAD/LICENSE.md</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>theoliverlear</id>
            <name>Oliver Lear Sigwarth</name>
            <email>sigwarthsoftware@gmail.com</email>
            <organization>Sigwarth Software</organization>
            <organizationUrl>https://github.com/theoliverlear</organizationUrl>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:https://github.com/theoliverlear/Crypto-Trader.git</connection>
        <developerConnection>scm:git:ssh://git@github.com/theoliverlear/Crypto-Trader.git</developerConnection>
        <url>https://github.com/theoliverlear/Crypto-Trader</url>
        <tag>HEAD</tag>
    </scm>

    <modules>
        <module>Crypto-Trader-Api</module>
        <module>Crypto-Trader-Admin</module>
        <module>Crypto-Trader-Library</module>
        <module>Crypto-Trader-Assets</module>
        <module>Crypto-Trader-Testing</module>
        <module>Crypto-Trader-Version</module>
        <module>Crypto-Trader-Engine</module>
        <module>Crypto-Trader-Data</module>
        <module>Crypto-Trader-Logging</module>
        <module>Crypto-Trader-Docs</module>
        <module>Crypto-Trader-Coverage</module>
        <module>Crypto-Trader-Health</module>
    </modules>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>23</java.version>
        <maven.compiler.release>23</maven.compiler.release>
        <junit-jupiter.version>5.10.2</junit-jupiter.version>
        <assertj.version>3.25.3</assertj.version>
        <mockito.version>5.11.0</mockito.version>
        <testcontainers.version>1.20.1</testcontainers.version>
        <!-- Default main class for generating OpenAPI docs; can be overridden with -Ddocs.mainClass=... -->
        <docs.mainClass>org.cryptotrader.api.CryptoTraderApiApplication</docs.mainClass>
        <argLine/>
        <surefireArgLine/>
        <jacoco.version>0.8.12</jacoco.version>
        <surefire.version>3.2.5</surefire.version>
        <failsafe.version>3.2.5</failsafe.version>
        <skipDokka>false</skipDokka>
        <skipJavadoc>true</skipJavadoc>
        <surefire.forkedProcessTimeoutInSeconds>180</surefire.forkedProcessTimeoutInSeconds>
        <surefire.skipAfterFailureCount>1</surefire.skipAfterFailureCount>
        <!-- Coverage thresholds (defaults allow build to pass; enable enforcement with -Dcoverage.check.skip=false) -->
        <coverage.check.skip>true</coverage.check.skip>
        <coverage.line.min>0.00</coverage.line.min>
        <coverage.branch.min>0.00</coverage.branch.min>
        <coverage.instruction.min>0.00</coverage.instruction.min>
        
        <!-- JaCoCo defaults -->
        <jacoco.skip>false</jacoco.skip>
        <jacoco.ut.exec>${project.build.directory}/jacoco.exec</jacoco.ut.exec>
        <jacoco.it.exec>${project.build.directory}/jacoco-it.exec</jacoco.it.exec>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>testcontainers-bom</artifactId>
                <version>${testcontainers.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>${junit-jupiter.version}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-api</artifactId>
                <version>${junit-jupiter.version}</version>
            </dependency>
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter-engine</artifactId>
                <version>${junit-jupiter.version}</version>
            </dependency>
            <dependency>
                <groupId>org.assertj</groupId>
                <artifactId>assertj-core</artifactId>
                <version>${assertj.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mockito</groupId>
                <artifactId>mockito-junit-jupiter</artifactId>
                <version>${mockito.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <pluginRepositories>
        <pluginRepository>
            <id>central</id>
            <name>Maven Central</name>
            <url>https://repo.maven.apache.org/maven2</url>
        </pluginRepository>
        <pluginRepository>
            <id>jetbrains-dokka</id>
            <name>JetBrains Dokka Repository</name>
            <url>https://maven.pkg.jetbrains.space/kotlin/p/dokka/maven</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>

    <dependencies>
        <!-- Ensure all modules have JUnit 5 on the test classpath for IDE 'Run All Tests' -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- JUnit Platform Suite engine to make root-level suite runnable in IDE -->
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite</artifactId>
            <version>1.10.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>1.9.20</version>
        </dependency>
    </dependencies>

    <build>
      <!-- Keep versions/config in pluginManagement if you want, but no executions there -->
      <pluginManagement>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>${surefire.version}</version>
            <configuration>
              <useModulePath>false</useModulePath>
              <argLine>@{argLine}</argLine>
              <systemPropertyVariables>
                <junit.platform.excludeEngines>vintage</junit.platform.excludeEngines>
              </systemPropertyVariables>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${failsafe.version}</version>
            <configuration>
              <argLine>@{argLine}</argLine>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>${jacoco.version}</version>
            <configuration>
              <skip>${jacoco.skip}</skip>
            </configuration>
          </plugin>
        </plugins>
      </pluginManagement>
      <plugins>
          <plugin>
              <groupId>org.jetbrains.dokka</groupId>
              <artifactId>dokka-maven-plugin</artifactId>
              <version>1.9.20</version>
              <inherited>true</inherited>
              <configuration>
                  <outputDir>${project.build.directory}/dokka-html</outputDir>
                  <dokkaPlugins>
                      <plugin>
                          <groupId>org.jetbrains.dokka</groupId>
                          <artifactId>dokka-base</artifactId>
                          <version>1.9.20</version>
                      </plugin>
                  </dokkaPlugins>
              </configuration>
          </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-failsafe-plugin</artifactId>
          <executions>
            <execution>
              <id>integration-tests</id>
              <goals>
                <goal>integration-test</goal>
                <goal>verify</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <executions>
            <execution>
              <id>jacoco-prepare-ut</id>
              <goals><goal>prepare-agent</goal></goals>
              <configuration>
                <destFile>${jacoco.ut.exec}</destFile>
              </configuration>
            </execution>
            <execution>
              <id>jacoco-prepare-it</id>
              <goals><goal>prepare-agent-integration</goal></goals>
              <configuration>
                <destFile>${jacoco.it.exec}</destFile>
              </configuration>
            </execution>
            <execution>
              <id>jacoco-report-ut</id>
              <phase>verify</phase>
              <goals><goal>report</goal></goals>
              <configuration>
                <dataFile>${jacoco.ut.exec}</dataFile>
                <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
                <formats>
                  <format>XML</format>
                  <format>HTML</format>
                </formats>
              </configuration>
            </execution>
            <execution>
              <id>jacoco-report-it</id>
              <phase>verify</phase>
              <goals><goal>report-integration</goal></goals>
              <configuration>
                <dataFile>${jacoco.it.exec}</dataFile>
                <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
                <formats>
                  <format>XML</format>
                  <format>HTML</format>
                </formats>
              </configuration>
            </execution>
            <execution>
              <id>jacoco-aggregate</id>
              <phase>verify</phase>
              <inherited>false</inherited>
              <goals><goal>report-aggregate</goal></goals>
              <configuration>
                <outputDirectory>${project.reporting.outputDirectory}/jacoco-aggregate</outputDirectory>
                <formats>
                  <format>XML</format>
                  <format>HTML</format>
                </formats>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>

    <distributionManagement>
        <repository>
            <id>github</id>
            <name>GitHub Packages - Crypto-Trader</name>
            <url>https://maven.pkg.github.com/theoliverlear/Crypto-Trader</url>
        </repository>
    </distributionManagement>

    <repositories>
        <repository>
            <id>central</id>
            <url>https://repo.maven.apache.org/maven2/</url>
        </repository>
        <repository>
            <id>jetbrains-dokka</id>
            <name>JetBrains Dokka Repository</name>
            <url>https://maven.pkg.jetbrains.space/kotlin/p/dokka/maven</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>gh-crypto-trader</id>
            <name>GitHub Packages - Crypto-Trader</name>
            <url>https://maven.pkg.github.com/theoliverlear/Crypto-Trader</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>gh-sigwarth-suite</id>
            <name>GitHub Packages - Sigwarth-Software-Suite</name>
            <url>https://maven.pkg.github.com/theoliverlear/Sigwarth-Software-Suite</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>

    <profiles>
        <profile>
            <id>coverage</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                </plugins>
            </build>

            <properties>
                <skipITs>true</skipITs>
                <maven.test.skip>false</maven.test.skip>
                <failIfNoTests>false</failIfNoTests>
                <surefire.skipAfterFailureCount>1</surefire.skipAfterFailureCount>
                <surefire.forkedProcessTimeoutInSeconds>180</surefire.forkedProcessTimeoutInSeconds>
                <spring.test.log.level>WARN</spring.test.log.level>
            </properties>
        </profile>
        <profile>
            <id>include-its</id>
            <activation>
                <property>
                    <name>includeITs</name>
                    <value>true</value>
                </property>
            </activation>
            <properties>
                <skipITs>false</skipITs>
                <failsafe.skipITs>false</failsafe.skipITs>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${failsafe.version}</version>
                        <configuration>
                            <forkedProcessTimeoutInSeconds>180</forkedProcessTimeoutInSeconds>
                            <skipITs>false</skipITs>
                            <argLine>${surefireArgLine} ${argLine} -Dfile.encoding=UTF-8 -XX:+EnableDynamicAgentLoading</argLine>
                        </configuration>
                        <executions>
                            <execution>
                                <id>integration-tests</id>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>